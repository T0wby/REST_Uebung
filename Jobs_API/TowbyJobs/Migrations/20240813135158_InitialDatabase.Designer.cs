// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TowbyJobs.Data;

#nullable disable

namespace TowbyJobs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240813135158_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("TowbyJobs.Models.City", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("City_Id"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("City_Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TowbyJobs.Models.Company", b =>
                {
                    b.Property<int>("Company_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Company_Id"));

                    b.Property<int>("City_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Country_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Housenumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Company_Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("Country_Id");

                    b.HasIndex("State_Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TowbyJobs.Models.Country", b =>
                {
                    b.Property<int>("Country_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Country_Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Country_Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TowbyJobs.Models.Job", b =>
                {
                    b.Property<int>("Job_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Job_Id"));

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Company_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfApplication")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Job_Id");

                    b.HasIndex("Company_Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("TowbyJobs.Models.State", b =>
                {
                    b.Property<int>("State_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("State_Id"));

                    b.Property<DateTime>("LastTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("State_Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("TowbyJobs.Models.Company", b =>
                {
                    b.HasOne("TowbyJobs.Models.City", "City")
                        .WithMany("Companys")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TowbyJobs.Models.Country", "Country")
                        .WithMany("Companys")
                        .HasForeignKey("Country_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TowbyJobs.Models.State", "State")
                        .WithMany("Companys")
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TowbyJobs.Models.Job", b =>
                {
                    b.HasOne("TowbyJobs.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TowbyJobs.Models.City", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("TowbyJobs.Models.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TowbyJobs.Models.Country", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("TowbyJobs.Models.State", b =>
                {
                    b.Navigation("Companys");
                });
#pragma warning restore 612, 618
        }
    }
}
